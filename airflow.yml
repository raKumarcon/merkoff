apiVersion: v1
kind: Service
metadata:
  name: postgres
spec:
  type: ClusterIP
  selector:
    app: airflow
    tier: db
  ports:
    - name: postgres
      protocol: TCP
      port: 5432
      targetPort: postgres
---
apiVersion: v1
kind: Service
metadata:
  name: redis
spec:
  type: ClusterIP
  selector:
    app: airflow
    tier: redis
  ports:
    - name: node
      protocol: TCP
      port: 6379
      targetPort: node
    - name: management
      protocol: TCP
      port: 16379
      targetPort: management
---
apiVersion: v1
kind: Service
metadata:
  name: webserver
spec:
  type: NodePort
  selector:
    app: airflow
    tier: webserver
  ports:
    - name: webserver
      protocol: TCP
      port: 8080
      targetPort: webserver
      nodePort: 32080
---
apiVersion: v1
kind: Service
metadata:
  name: flower
spec:
  type: NodePort
  selector:
    app: airflow
    tier: flower
  ports:
    - name: flower
      protocol: TCP
      port: 5555
      targetPort: flower
      nodePort: 32081
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: postgres
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: airflow
        tier: db
    spec:
      containers:
      - name: postgres
        image: postgres:9.6
        ports:
        - name: postgres
          containerPort: 5432
        env:
         - name: POSTGRES_USER
           value: "airflow"
         - name: POSTGRES_PASSWORD
           value: "airflow"
         - name: POSTGRES_DB
           value: "airflow"
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: redis
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: airflow
        tier: redis
    spec:
      restartPolicy: Always
      containers:
      - name: redis
        image: redis:3.2.7
        ports:
        - name: management
          containerPort: 16379
        - name: node
          containerPort: 6379
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: webserver
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: airflow
        tier: webserver
    spec:
      restartPolicy: Always
      containers:
      - name: webserver
        image: rakumarcon/airflow
        env:
        - name: AIRFLOW_HOME
          value: "/usr/local/airflow"
        ports:
        - name: webserver
          containerPort: 8080
        args: ["webserver"]
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: flower
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: airflow
        tier: flower
    spec:
      restartPolicy: Always
      containers:
      - name: flower
        image: rakumarcon/airflow
        env:
        - name: AIRFLOW_HOME
          value: "/usr/local/airflow"
        # To prevent the error: ValueError: invalid literal for int() with base 10: 'tcp://10.0.0.83:5555'
        - name: FLOWER_PORT
          value: "5555"
        ports:
        - name: flower
          containerPort: 5555
        args: ["flower"]
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: scheduler
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: airflow
        tier: scheduler
    spec:
      restartPolicy: Always
      containers:
      - name: scheduler
        image: rakumarcon/airflow
        # volumes:
        #     - /localpath/to/dags:/usr/local/airflow/dags
        env:
        - name: AIRFLOW_HOME
          value: "/usr/local/airflow"
        args: ["scheduler", "-n", "5"]
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: worker
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: airflow
        tier: worker
    spec:
      restartPolicy: Always
      containers:
      - name: worker
        image: rakumarcon/airflow
        # volumes:
        #     - /localpath/to/dags:/usr/local/airflow/dags
        env:
        - name: AIRFLOW_HOME
          value: "/usr/local/airflow"
        args: ["worker"]